# -*- coding: utf-8 -*-
"""OutletIQ_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LJeoqkxO3g8fgJV4s5CbiaphAxt3_gDx
"""

import pandas as pd
import numpy as np
import os

def get_mock_data():
    """
    Load real outlet data from the CSV file.
    """
    # Load outlet data from CSV file
    try:
        csv_path = "assets/gb_outlets (1).csv"
        if os.path.exists(csv_path):
            print(f"Loading data from {csv_path}")
            df = pd.read_csv(csv_path)

            # Rename columns to match the application's expected schema
            column_mapping = {
                'Outlet_Name': 'name',
                'Outlet_Type': 'type',
                'Location_Type': 'location_type',
                'Diageo_Coverage': 'diageo_coverage',
                'Planned_for_Coverage': 'planned_coverage',
                'Potential_Score': 'potential_score',
                'Performance_Score': 'performance_score',
                'Latitude': 'latitude',
                'Longitude': 'longitude',
                'Outlet_ID': 'id',
                'NSV_Potential_GBP': 'nsv_potential',
                'Archetype': 'archetype',
                'City': 'city'  # Map City to city directly
            }

            # Apply column mapping only for columns that exist
            new_columns = {}
            for old_col, new_col in column_mapping.items():
                if old_col in df.columns:
                    new_columns[old_col] = new_col

            df = df.rename(columns=new_columns)

            # Add additional required fields for the application
            df['country'] = 'UK'

            # Add territory based on city
            # Handle case if city column doesn't exist
            if 'city' in df.columns:
                df['territory'] = df['city'].apply(lambda x: 'Central' if x == 'London' else ('Northern' if x == 'Manchester' else 'Midlands'))
            else:
                # Default territory if city is not available
                df['territory'] = 'Central'
                df['city'] = 'London'  # Default city

            # Add footfall based on potential score
            def get_footfall(score):
                if score >= 85:
                    return "High (500+ daily)"
                elif score >= 70:
                    return "Medium (300-500 daily)"
                else:
                    return "Low (100-300 daily)"

            if 'potential_score' in df.columns:
                df['footfall'] = df['potential_score'].apply(get_footfall)
            else:
                df['footfall'] = "Medium (300-500 daily)"  # Default
                df['potential_score'] = 75  # Default

            # Add average spend based on NSV potential
            def get_avg_spend(nsv):
                if nsv >= 30000:
                    return f"£{int(nsv/500)} per customer"
                elif nsv >= 15000:
                    return f"£{int(nsv/400)} per customer"
                else:
                    return f"£{int(nsv/350)} per customer"

            if 'nsv_potential' in df.columns:
                df['avg_spend'] = df['nsv_potential'].apply(get_avg_spend)
            else:
                df['avg_spend'] = "£35 per customer"  # Default
                df['nsv_potential'] = 15000  # Default

            # Add value tier based on potential score
            def get_value_tier(score):
                if score >= 85:
                    return "Top Tier"
                elif score >= 70:
                    return "Mid Tier"
                else:
                    return "Value Tier"

            if 'potential_score' in df.columns:
                df['value_tier'] = df['potential_score'].apply(get_value_tier)
            else:
                df['value_tier'] = "Mid Tier"  # Default

            # Add outlet potential category
            def get_outlet_potential(score):
                if score >= 85:
                    return "High"
                elif score >= 70:
                    return "Medium"
                else:
                    return "Low"

            if 'potential_score' in df.columns:
                df['outlet_potential'] = df['potential_score'].apply(get_outlet_potential)
            else:
                df['outlet_potential'] = "Medium"  # Default

            # Set outlet type
            if 'type' in df.columns:
                df['outlet_type'] = df['type'].apply(lambda x: "Upscale" if "Cocktail" in str(x) or "Premium" in str(x) or "Gastropub" in str(x) else "Casual")
            else:
                df['outlet_type'] = "Casual"  # Default
                df['type'] = "Traditional Pub"  # Default

            # Add crowd info
            if 'potential_score' in df.columns:
                df['crowd_type'] = df['potential_score'].apply(lambda x: "High" if x >= 85 else "Medium" if x >= 70 else "Low")
            else:
                df['crowd_type'] = "Medium"  # Default

            # Add private label info
            if 'type' in df.columns:
                df['private_label'] = df['type'].apply(lambda x: "Yes" if "Gastropub" in str(x) or "Cocktail" in str(x) else "No")
            else:
                df['private_label'] = "No"  # Default

            # Add audience info
            if 'potential_score' in df.columns:
                df['audience'] = df['potential_score'].apply(lambda x: "High" if x >= 85 else "Medium" if x >= 70 else "Low")
            else:
                df['audience'] = "Medium"  # Default

            # Add business metrics
            if 'nsv_potential' in df.columns:
                df['last_quarter_business'] = df['nsv_potential'].apply(lambda x: f"{int(x/100)}K")
                df['avg_order_value'] = df['nsv_potential'].apply(lambda x: str(int(x/350)))
            else:
                df['last_quarter_business'] = "150K"  # Default
                df['avg_order_value'] = "45"  # Default

            if 'potential_score' in df.columns:
                df['share_of_menu'] = df['potential_score'].apply(lambda x: f"{int(x/3)}%")
            else:
                df['share_of_menu'] = "25%"  # Default

            # Add radar chart metrics
            if 'potential_score' in df.columns:
                df['review_rating'] = df['potential_score'].apply(lambda x: int(x * 0.95))
                df['demographics_score'] = df['potential_score'].apply(lambda x: int(x * 0.9))
                df['opportunity_score'] = df['potential_score'].apply(lambda x: int(x * 1.05) if x < 95 else 95)
                df['menu_category_focus'] = df['potential_score'].apply(lambda x: int(x * 0.85))
                df['value_profile'] = df['potential_score'].apply(lambda x: int(x * 1.1) if x < 90 else 98)
            else:
                df['review_rating'] = 75  # Default
                df['demographics_score'] = 70  # Default
                df['opportunity_score'] = 80  # Default
                df['menu_category_focus'] = 65  # Default
                df['value_profile'] = 75  # Default

            # Fill in any missing columns with defaults
            required_columns = [
                'name', 'type', 'location_type', 'diageo_coverage', 'planned_coverage',
                'potential_score', 'performance_score', 'latitude', 'longitude',
                'id', 'nsv_potential', 'archetype', 'country', 'territory', 'city', 'footfall',
                'avg_spend', 'value_tier', 'outlet_potential', 'outlet_type', 'crowd_type',
                'private_label', 'audience', 'last_quarter_business', 'avg_order_value',
                'share_of_menu', 'review_rating', 'demographics_score', 'opportunity_score',
                'menu_category_focus', 'value_profile'
            ]

            for col in required_columns:
                if col not in df.columns:
                    if col == 'diageo_coverage' or col == 'planned_coverage' or col == 'private_label':
                        df[col] = "Yes"
                    elif col == 'location_type':
                        df[col] = "City Centre"
                    elif col == 'performance_score':
                        df[col] = 70
                    elif col == 'archetype':
                        df[col] = "Standard Pub"
                    elif col == 'id':
                        df[col] = df.index.astype(str)
                    else:
                        df[col] = "Default"

            print(f"Successfully loaded {len(df)} outlets")
            print(f"Available columns: {df.columns.tolist()}")
            return df

    except Exception as e:
        print(f"Error loading outlet data: {e}")
        import traceback
        traceback.print_exc()

    print("Creating fallback data")
    # Fallback to a basic DataFrame with required columns
    df = pd.DataFrame({
        'name': ["The Crown Pub", "The Red Lion"],
        'type': ["Traditional Pub", "Gastropub"],
        'location_type': ["City Centre", "Neighborhood"],
        'diageo_coverage': ["Yes", "Yes"],
        'planned_coverage': ["Yes", "Yes"],
        'potential_score': [85, 75],
        'performance_score': [70, 65],
        'latitude': [51.5127, 51.5132],
        'longitude': [-0.1340, -0.1337],
        'id': ["OU001", "OU002"],
        'nsv_potential': [25000, 15000],
        'archetype': ["Community Pub", "Gastropub"],
        'country': ["UK", "UK"],
        'city': ["London", "London"],
        'territory': ["Central", "Central"],
        'footfall': ["High (500+ daily)", "Medium (300-500 daily)"],
        'avg_spend': ["£50 per customer", "£37 per customer"],
        'value_tier': ["Top Tier", "Mid Tier"],
        'outlet_potential': ["High", "Medium"],
        'outlet_type': ["Casual", "Upscale"],
        'crowd_type': ["High", "Medium"],
        'private_label': ["No", "Yes"],
        'audience': ["High", "Medium"],
        'last_quarter_business': ["250K", "150K"],
        'avg_order_value': ["71", "43"],
        'share_of_menu': ["28%", "25%"],
        'review_rating': [81, 71],
        'demographics_score': [77, 68],
        'opportunity_score': [89, 79],
        'menu_category_focus': [72, 64],
        'value_profile': [94, 83]
    })

    return df

def get_products_data():
    """
    Generate products data for demonstration purposes.
    """
    products = [
        {
            "name": "Guinness Draught",
            "volume": "500ml",
            "image": "guinness.jpg",
            "last_order_date": "May 3, 2025",
            "frequency": "Weekly",
            "previous_volume": "24 bottles",
            "status": "Well Stocked"
        },
        {
            "name": "Smirnoff Vodka",
            "volume": "500ml",
            "image": "smirnoff.jpg",
            "last_order_date": "March 15, 2025",
            "frequency": "Monthly",
            "previous_volume": "12 bottles",
            "status": "Out of stock"
        },
        {
            "name": "Tanqueray",
            "volume": "700ml",
            "image": "tanqueray.jpg",
            "last_order_date": "April 10, 2025",
            "frequency": "Monthly",
            "previous_volume": "6 bottles",
            "status": "Missing"
        },
        {
            "name": "Johnnie Walker Black Label",
            "volume": "700ml",
            "image": "johnnie_walker.jpg",
            "last_order_date": "April 22, 2025",
            "frequency": "Bi-monthly",
            "previous_volume": "4 bottles",
            "status": "Low Stock"
        },
        {
            "name": "Baileys Irish Cream",
            "volume": "700ml",
            "image": "baileys.jpg",
            "last_order_date": "March 28, 2025",
            "frequency": "Monthly",
            "previous_volume": "6 bottles",
            "status": "Well Stocked"
        }
    ]

    return products
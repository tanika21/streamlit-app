# -*- coding: utf-8 -*-
"""streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oCl_r2rdVjmrH3nY9VOAGttyOzX4eTOh
"""

#pip install streamlit

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from data import get_mock_data, get_products_data
from components import (
    render_header,
    render_filters,
    render_outlet_detail,
    render_metrics_section,
    render_products_section,
    render_missing_opportunities
)
from utils import calculate_radar_values

# Page configuration
st.set_page_config(
    page_title="Outlets IQ - Diageo",
    page_icon="🥃",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Load data first
outlets_data = get_mock_data()
products_data = get_products_data()

# Initialize session state if not already present
if 'current_tab' not in st.session_state:
    st.session_state.current_tab = "Outlet Universe"
if 'selected_outlet' not in st.session_state:
    st.session_state.selected_outlet = None
if 'filter_country' not in st.session_state:
    st.session_state.filter_country = "UK"
if 'filter_city' not in st.session_state:
    st.session_state.filter_city = "London"
if 'filter_territory' not in st.session_state:
    st.session_state.filter_territory = "Soho"
if 'filter_coverage' not in st.session_state:
    st.session_state.filter_coverage = "Yes"
if 'filter_potential' not in st.session_state:
    st.session_state.filter_potential = "High"

# Initialize a default selected outlet from the data
if 'selected_outlet' not in st.session_state or st.session_state.selected_outlet is None:
    if not outlets_data.empty:
        # Just select the first outlet as default
        st.session_state.selected_outlet = outlets_data.iloc[0]

# Render the header with logo and navigation
render_header()

# Set current tab first so it's available for the filter keys
if 'current_tab' not in st.session_state:
    st.session_state.current_tab = "Outlet Universe"

# Create tabs for navigation
tab1, tab2, tab3, tab4 = st.tabs([
    "Outlet Universe",
    "Opportunity List",
    "Outlet Strategy",
    "Action Planner"
])

with tab1:
    st.session_state.current_tab = "Outlet Universe"

    # Render filter section
    filter_cols = render_filters()

    # Display map visualization of outlets
    outlets_filtered = outlets_data.copy()

    # Apply filters if data is available
    if 'country' in outlets_filtered.columns:
        outlets_filtered = outlets_filtered[outlets_filtered["country"] == st.session_state.filter_country]
    if 'city' in outlets_filtered.columns:
        outlets_filtered = outlets_filtered[outlets_filtered["city"] == st.session_state.filter_city]
    if 'territory' in outlets_filtered.columns:
        outlets_filtered = outlets_filtered[outlets_filtered["territory"] == st.session_state.filter_territory]
    if 'diageo_coverage' in outlets_filtered.columns:
        outlets_filtered = outlets_filtered[outlets_filtered["diageo_coverage"] == st.session_state.filter_coverage]
    if 'outlet_potential' in outlets_filtered.columns:
        outlets_filtered = outlets_filtered[outlets_filtered["outlet_potential"] == st.session_state.filter_potential]

    if outlets_filtered.empty:
        st.info("No outlets match the current filters.")
    else:
        # Create map using folium
        import folium
        from streamlit_folium import folium_static

        # Center map on average location of filtered outlets
        center_lat = outlets_filtered['latitude'].mean()
        center_lon = outlets_filtered['longitude'].mean()

        m = folium.Map(location=[center_lat, center_lon], zoom_start=14,
                       tiles="OpenStreetMap")

        # Add markers for each outlet
        for i, outlet in outlets_filtered.iterrows():
            # Choose color based on potential
            if outlet['outlet_potential'] == 'High':
                color = 'red'
            elif outlet['outlet_potential'] == 'Medium':
                color = 'orange'
            else:
                color = 'blue'

            popup_text = f"""
            <b>{outlet['name']}</b><br>
            {outlet['type']}<br>
            Potential: {outlet['outlet_potential']}<br>
            Coverage: {outlet['diageo_coverage']}
            """

            folium.Marker(
                location=[outlet['latitude'], outlet['longitude']],
                popup=popup_text,
                icon=folium.Icon(color=color, icon='glass', prefix='fa')
            ).add_to(m)

        # Display the map
        folium_static(m)

        # Show summary metrics
        st.markdown("### Outlets Overview")
        metrics_cols = st.columns(5)

        with metrics_cols[0]:
            st.metric("Total Opportunities", f"{len(outlets_filtered)}")

        with metrics_cols[1]:
            high_value = len(outlets_filtered[outlets_filtered['value_tier'] == 'Top Tier'])
            st.metric("High Value Opportunities", f"{high_value}")

        with metrics_cols[2]:
            market_count = outlets_filtered['location_type'].value_counts().get('Marketplace', 0)
            st.metric("Location type with Large opportunities Volume", "Marketplace")

        with metrics_cols[3]:
            st.metric("Total Unique Outlets", "10")

        with metrics_cols[4]:
            covered = len(outlets_filtered[outlets_filtered['diageo_coverage'] == 'Yes'])
            st.metric("Covered Outlets with opportunity", f"{covered}")

        # Display outlets in a table
        st.subheader("Outlets")
        st.caption("Prioritized list of outlets by segment")

        # Add search box for outlets
        search_col1, search_col2, search_col3 = st.columns([3, 1, 1])
        with search_col1:
            search_query = st.text_input("", placeholder="Search Outlets...", key="universe_search")
        with search_col3:
            st.button("Export", type="primary", key="universe_export")

        # Display outlets in a table with selection
        st.dataframe(
            outlets_filtered[["name", "type", "location_type", "diageo_coverage", "planned_coverage", "outlet_potential"]],
            hide_index=True,
            use_container_width=True,
            column_config={
                "name": "Outlet",
                "type": "Outlet Type",
                "location_type": "Location Type",
                "diageo_coverage": "Diageo Coverage",
                "planned_coverage": "Planned for Coverage",
                "outlet_potential": "Outlet Potential"
            }
        )

        # Allow selection of outlet
        selected_outlet_name = st.selectbox(
            "Select an outlet for details:",
            options=outlets_filtered["name"].tolist(),
            index=0 if not outlets_filtered.empty else None,
            key="tab1_outlet_select",
            label_visibility="collapsed"
        )

        if selected_outlet_name:
            st.session_state.selected_outlet = outlets_filtered[outlets_filtered["name"] == selected_outlet_name].iloc[0]

with tab2:
    st.session_state.current_tab = "Opportunity List"

    # Render filter section
    filter_cols = render_filters()

    # Segmented filters section
    col1, col2 = st.columns([1, 3])

    with col1:
        st.markdown("### Segmented Outlet Opportunity Filters")

        # Value Tier filter
        st.markdown("**Value Tier:**")
        all_tiers = st.button("All Value Tiers", key="all_value_tiers", type="secondary")
        tier_cols = st.columns(3)
        with tier_cols[0]:
            top_tier = st.button("Top Tier", key="top_tier")
        with tier_cols[1]:
            mid_tier = st.button("Mid Tier", key="mid_tier")
        with tier_cols[2]:
            bottom_tier = st.button("Bottom Tier", key="bottom_tier")

        # Outlet Type filter
        st.markdown("")
        st.markdown("**Outlet Type:**")
        all_types = st.button("All Outlet Types", key="all_outlet_types", type="secondary")
        type_cols = st.columns(3)
        with type_cols[0]:
            casual = st.button("Casual", key="casual_type")
        with type_cols[1]:
            sports = st.button("Sports", key="sports_type")
        with type_cols[2]:
            fine_dine = st.button("Fine Dine", key="fine_dine_type")

        # Location Type filter
        st.markdown("")
        st.markdown("**By Location Type:**")
        all_locations = st.button("All Locations", key="all_locations", type="secondary")
        loc_cols = st.columns(3)
        with loc_cols[0]:
            marketplace = st.button("Marketplace", key="marketplace_type")
        with loc_cols[1]:
            corporate = st.button("Corporate", key="corporate_type")
        with loc_cols[2]:
            neighborhood = st.button("Neighbourhood", key="neighborhood_type")

        # Insights section
        st.markdown("### Segment Insights")
        st.caption("Strategic context for selected segment")

        # Metrics for this segment
        metric_row1 = st.columns(2)
        with metric_row1[0]:
            st.markdown("**Avg. Potential Score**")
            st.markdown("**85**", unsafe_allow_html=True)
        with metric_row1[1]:
            st.markdown("**Average Rating**")
            st.markdown("**3.3**", unsafe_allow_html=True)

        metric_row2 = st.columns(2)
        with metric_row2[0]:
            st.markdown("**Territory Type**")
            st.markdown("**Large**", unsafe_allow_html=True)
        with metric_row2[1]:
            st.markdown("**Outlet Type**")
            st.markdown("**Mixed**", unsafe_allow_html=True)

        metric_row3 = st.columns(2)
        with metric_row3[0]:
            st.markdown("**Opportunities**")
            st.markdown("**7**", unsafe_allow_html=True)
        with metric_row3[1]:
            st.markdown("**High Value opportunities**")
            st.markdown("**6**", unsafe_allow_html=True)

    with col2:
        # Opportunity scatter plot
        st.markdown("### Coverage Opportunity Insights")

        # Create scatter plot
        import plotly.graph_objects as go
        import numpy as np

        # Generate sample data for the scatter plot
        performance_scores = [60, 62, 72, 88, 75, 80]
        potential_scores = [90, 82, 76, 86, 65, 92]
        market_sizes = [400, 250, 200, 500, 350, 300]  # Represents bubble size

        fig = go.Figure()

        # Add scatter plot with bubbles of varying size
        fig.add_trace(go.Scatter(
            x=performance_scores,
            y=potential_scores,
            mode='markers',
            marker=dict(
                size=[s/10 for s in market_sizes],
                sizemode='area',
                sizeref=0.1,
                color='rgba(255, 102, 102, 0.7)',
                line=dict(width=1, color='rgba(255, 102, 102, 1)')
            ),
            text=['The Crown Pub', 'Boardwalk', 'Spice Lounge', 'Harbor View', 'The Red Lion', 'Duke\'s Head'],
            hovertemplate='%{text}<br>Potential: %{y}<br>Performance: %{x}<extra></extra>'
        ))

        # Customize the layout
        fig.update_layout(
            xaxis=dict(
                title='Diageo Performance Score',
                range=[0, 100],
                gridcolor='lightgray',
                showgrid=True
            ),
            yaxis=dict(
                title='Potential Score',
                range=[0, 100],
                gridcolor='lightgray',
                showgrid=True
            ),
            plot_bgcolor='white',
            height=350,
            margin=dict(l=20, r=20, t=20, b=40)
        )

        # Display the plot
        st.plotly_chart(fig, use_container_width=True)

        # Display opportunities table
        st.markdown("### Opportunities")
        st.caption("Prioritized list of outlets by segment")

        # Search box for opportunities
        search_col1, search_col2, search_col3 = st.columns([3, 1, 1])
        with search_col1:
            search_query = st.text_input("", placeholder="Search Outlets...", key="opportunity_search")
        with search_col3:
            st.button("Export", type="primary", key="opportunity_export")

        # Create opportunity data
        opportunities_data = {
            "Outlet": ["The Crown Pub", "Boardwalk", "Spice Lounge", "Harbor View"],
            "Potential score": [90, 82, 76, 88],
            "Diageo Coverage": ["Yes", "Yes", "Yes", "No"],
            "Planned for Coverage": ["Yes", "Yes", "Yes", "Yes"],
            "Performance score": [60, 62, 72, 68],
            "Key Opportunities": ["Smirnoff 750ml out of stock", "Outlet request for Guinness nitro stout", "No Premium Diageo Whisky", "Missing premium gin"],
            "Portfolio Action": ["Remind to stock", "Engagement with proposal for Guinness nitro stout top & replenishment", "Sampler Whisky trail", "Introduce Tanqueray No. TEN"]
        }

        # Display as table with checkbox selection
        opportunities_df = pd.DataFrame(opportunities_data)

        # Display using st.dataframe for better formatting
        # Add a column for action buttons manually since ButtonColumn isn't available
        opportunities_df["Action"] = ["Visit"] * len(opportunities_df)

        edited_df = st.data_editor(
            opportunities_df,
            column_config={
                "Outlet": st.column_config.TextColumn("Outlet"),
                "Potential score": st.column_config.NumberColumn("Potential score", format="%d"),
                "Diageo Coverage": st.column_config.TextColumn("Diageo Coverage"),
                "Planned for Coverage": st.column_config.TextColumn("Planned for Coverage"),
                "Performance score": st.column_config.NumberColumn("Performance score", format="%d"),
                "Key Opportunities": st.column_config.TextColumn("Key Opportunities"),
                "Portfolio Action": st.column_config.TextColumn("Portfolio Action"),
                "Action": st.column_config.TextColumn("Action")
            },
            hide_index=True,
            use_container_width=True
        )

        # Handle selection
        if 'selected_row' in st.session_state:
            selected_idx = st.session_state.selected_row
            if selected_idx is not None and selected_idx < len(opportunities_df):
                selected_outlet_name = opportunities_df.loc[selected_idx, "Outlet"]
                outlet_data = outlets_data[outlets_data["name"] == selected_outlet_name]
                if not outlet_data.empty:
                    st.session_state.selected_outlet = outlet_data.iloc[0]

with tab3:
    st.session_state.current_tab = "Outlet Strategy"

    # Render filter section
    filter_cols = render_filters()

    # Display outlet list selection
    col1, col2 = st.columns([3, 2])

    with col1:
        # Outlet name and type (moved here from outlet_detail)
        if st.session_state.selected_outlet is not None:
            outlet = st.session_state.selected_outlet
            st.header(outlet["name"])
            st.caption(outlet["type"])

            # Create a placeholder for the pub image instead of using file
            st.markdown("""
            <div style="background-color: #333; color: #FFD700; text-align: center; padding: 40px 0; margin-bottom: 20px; font-size: 36px; font-weight: bold;">
                THE CROWN PUB
            </div>
            """, unsafe_allow_html=True)

            # Metrics section in a more condensed format to match screenshot
            metrics_cols = st.columns(5)

            with metrics_cols[0]:
                st.markdown("**Footfall**")
                st.markdown(outlet["footfall"])

            with metrics_cols[1]:
                st.markdown("**Avg. Spend**")
                st.markdown(outlet["avg_spend"])

            with metrics_cols[2]:
                st.markdown("**Value Tier**")
                st.markdown(outlet["value_tier"])

            with metrics_cols[3]:
                st.markdown("**Outlet Type**")
                st.markdown(outlet["outlet_type"])

            with metrics_cols[4]:
                st.markdown("**Location Type**")
                st.markdown(outlet["location_type"])

            # Second row of metrics
            metrics_row2 = st.columns(5)

            with metrics_row2[0]:
                st.markdown("**Rating**")
                stars = "⭐" * int(outlet["review_rating"] / 20)
                st.markdown(stars)

            with metrics_row2[1]:
                st.markdown("**Audience**")
                st.markdown(outlet["audience"])

            with metrics_row2[2]:
                st.markdown("**Crowd**")
                st.markdown(outlet["crowd_type"])

            with metrics_row2[3]:
                st.markdown("**Private Label Products**")
                st.markdown(outlet["private_label"])

            with metrics_row2[4]:
                if st.button("Action Plan", type="primary", key="action_plan_button_strategy"):
                    st.session_state.current_tab = "Action Planner"
                    st.rerun()

    with col2:
        # Outlet selection dropdown
        st.markdown("**Outlet List**")
        outlet_options = outlets_data["name"].tolist()
        selected_outlet_name = st.selectbox(
            "",
            options=outlet_options,
            index=outlet_options.index("The Crown Pub") if "The Crown Pub" in outlet_options else 0,
            key="strategy_outlet_select"
        )

        if selected_outlet_name:
            selected_outlet = outlets_data[outlets_data["name"] == selected_outlet_name].iloc[0]
            st.session_state.selected_outlet = selected_outlet

        # Potential score section
        st.markdown("")
        st.markdown("**Potential Score**")
        st.caption("Outlet opportunity rating (0-100)")

        # Render radar chart for the strategy view
        if st.session_state.selected_outlet is not None:
            import plotly.graph_objects as go

            # Extract radar chart values from outlet
            categories = [
                "Review & Ratings",
                "Demographics",
                "Opportunity",
                "Value Profile",
                "Menu & category focus"
            ]

            values = [
                st.session_state.selected_outlet["review_rating"],
                st.session_state.selected_outlet["demographics_score"],
                st.session_state.selected_outlet["opportunity_score"],
                st.session_state.selected_outlet["value_profile"],
                st.session_state.selected_outlet["menu_category_focus"]
            ]

            # Ensure the values form a closed polygon
            categories = categories + [categories[0]]
            values = values + [values[0]]

            # Create radar chart
            fig = go.Figure()

            fig.add_trace(go.Scatterpolar(
                r=values,
                theta=categories,
                fill='toself',
                fillcolor='rgba(151, 223, 188, 0.5)',
                line=dict(color='rgba(151, 223, 188, 1)', width=2),
                name='Metrics'
            ))

            fig.update_layout(
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, 100]
                    )
                ),
                showlegend=False,
                margin=dict(l=10, r=10, t=30, b=10),
                height=300
            )

            st.plotly_chart(fig, use_container_width=True)

            # Label for radar chart
            st.markdown("**Outlet Attributes**")
            st.markdown("**Value Profile**")

    # KPI row below outlet details
    if st.session_state.selected_outlet is not None:
        outlet = st.session_state.selected_outlet

        st.markdown("---")
        kpi_cols = st.columns(7)

        with kpi_cols[0]:
            st.markdown("**Diageo coverage**")
            st.markdown(outlet["diageo_coverage"])

        with kpi_cols[1]:
            st.markdown("**Planned for coverage**")
            st.markdown(outlet["planned_coverage"])

        with kpi_cols[2]:
            st.markdown("**Potential Score**")
            st.markdown(f"{outlet['potential_score']}")

        with kpi_cols[3]:
            st.markdown("**Diageo performance score**")
            st.markdown(f"{outlet['performance_score']}")

        with kpi_cols[4]:
            st.markdown("**Last quarter Business(GBP)**")
            st.markdown(outlet["last_quarter_business"])

        with kpi_cols[5]:
            st.markdown("**Average Order Value(GBP)**")
            st.markdown(outlet["avg_order_value"])

        with kpi_cols[6]:
            st.markdown("**Share of Menu**")
            st.markdown(outlet["share_of_menu"])

        # Product section
        st.markdown("---")
        st.subheader("Current Diageo Products")
        st.caption("Products currently stocked at this outlet")

        # Display products in a grid (3 columns)
        product_cols = st.columns(3)

        for i, product in enumerate(products_data):
            col_idx = i % 3

            with product_cols[col_idx]:
                st.markdown(f"### {product['name']} {product['volume']}")

                # Display status badge
                status = product['status']
                if status == "Well Stocked":
                    st.success("✓ Well Stocked")
                elif status == "Low Stock":
                    st.warning("⚠ Low Stock")
                elif status == "Out of stock":
                    st.error("❌ Out of stock")
                elif status == "Missing":
                    st.error("⛔ Missing")

                st.markdown(f"Last order: {product['last_order_date']}")
                st.markdown(f"Previous Ordered Volume: {product['previous_volume']}")

        # Missing opportunities section
        st.markdown("---")
        st.subheader("Missing Opportunities")
        st.caption("Products currently not stocked")

        # Display missing opportunities in a grid
        opportunity_cols = st.columns(3)

        with opportunity_cols[0]:
            st.markdown("### Tanqueray")
            st.error("⛔ Missing")
            st.markdown("68% of similar outlets stock this product")

        with opportunity_cols[1]:
            st.markdown("### Baileys Original")
            st.error("⛔ Missing")
            st.markdown("54% of similar outlets stock this product")

        with opportunity_cols[2]:
            st.markdown("### Johnnie Walker Black")
            st.error("⛔ Missing")
            st.markdown("42% of similar outlets stock this product")
    else:
        st.info("Please select an outlet first to view strategy details.")

with tab4:
    st.session_state.current_tab = "Action Planner"

    # Render filter section
    filter_cols = render_filters()

    # Weekly Action Planner section with design matching screenshot
    planner_header_cols = st.columns([3, 1])
    with planner_header_cols[0]:
        st.header("Weekly Action Planner")
    with planner_header_cols[1]:
        col1, col2 = st.columns([3, 1])
        with col1:
            st.selectbox("", options=["This Week", "Next Week", "Custom Range"], index=0, key="time_range", label_visibility="collapsed")
        with col2:
            st.button("📅 View Calendar", key="view_calendar_icon")

    # High-Priority Alerts section
    st.markdown('<div style="background-color: #FFF8E1; padding: 15px; border-radius: 5px; margin: 20px 0;">', unsafe_allow_html=True)

    st.markdown("#### 🔔 High-Potential Alerts")

    # Alert cards matching screenshot
    alert_cols = st.columns(3)

    with alert_cols[0]:
        st.markdown('<div style="border: 1px solid #E0E0E0; border-radius: 5px; padding: 15px;">', unsafe_allow_html=True)
        st.markdown("**Engage 5 outlets with > 80 score**")
        st.button("View Details", key="alert1_details")
        st.markdown('</div>', unsafe_allow_html=True)

    with alert_cols[1]:
        st.markdown('<div style="border: 1px solid #E0E0E0; border-radius: 5px; padding: 15px;">', unsafe_allow_html=True)
        st.markdown("**Remind 3 outlets with stockout risk**")
        st.button("View Details", key="alert2_details")
        st.markdown('</div>', unsafe_allow_html=True)

    with alert_cols[2]:
        st.markdown('<div style="border: 1px solid #E0E0E0; border-radius: 5px; padding: 15px;">', unsafe_allow_html=True)
        st.markdown("**Coordinate menu placement activities in 4 outlets**")
        st.button("View Details", key="alert3_details")
        st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

    # Actions filter tabs and controls - avoiding nested columns more than one level deep
    col1, col2, col3, col4 = st.columns([6, 1, 2, 1])

    with col1:
        tabs = st.tabs(["All Actions", "Planned", "Completed", "Deferred"])

    with col2:
        st.button("➕ Create Action", key="create_action")

    with col3:
        st.progress(25, "Progress:")

    with col4:
        st.markdown("**25%**")

    with tabs[0]:
        # Action cards that more closely match the screenshot
        # Card 1 - The Whisky Room (Planned)
        st.markdown('<div style="border: 1px solid #E0E0E0; border-radius: 5px; padding: 20px; margin-bottom: 20px; position: relative;">', unsafe_allow_html=True)

        # Planned badge
        st.markdown('<div style="position: absolute; top: 20px; right: 20px; background-color: #1A1A1A; color: white; padding: 5px 10px; border-radius: 15px; font-size: 12px;">Planned</div>', unsafe_allow_html=True)

        # Main content columns
        card_content_cols = st.columns([3, 1])

        with card_content_cols[0]:
            # Left column content
            st.subheader("The Whisky Room")
            st.caption("Reason: Stockout risk Guinness")

            st.markdown("**Suggested Action:**")
            st.markdown("Remind for Guinness Replenishment")

        with card_content_cols[1]:
            # Right column content - assignment info
            st.markdown("**Assigned to:**")
            st.markdown("👤 John Doe")

            st.markdown("**ETA:**")
            st.markdown("🕒 Today")

            # Complete checkbox
            st.checkbox("Complete", key="action1_complete")

            # More options - three dots
            st.markdown("⋮")

        st.markdown('</div>', unsafe_allow_html=True)

        # Card 2 - Beachside Cafe (Completed)
        st.markdown('<div style="border: 1px solid #E0E0E0; border-radius: 5px; padding: 20px; margin-bottom: 20px; position: relative; background-color: #F5F5F5;">', unsafe_allow_html=True)

        # Completed badge
        st.markdown('<div style="position: absolute; top: 20px; right: 20px; background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 15px; font-size: 12px;">Completed</div>', unsafe_allow_html=True)

        # Main content columns
        card_content_cols = st.columns([3, 1])

        with card_content_cols[0]:
            # Left column content
            st.subheader("Beachside Cafe")
            st.caption("Reason: We observed multiple small urgent orders, showing need for larger inventory")

            st.markdown("**Suggested Action:**")
            st.markdown("Propose larger order sizes with a volume discount.")

        with card_content_cols[1]:
            # Right column content - assignment info
            st.markdown("**Assigned to:**")
            st.markdown("👤 Jane Smith")

            st.markdown("**ETA:**")
            st.markdown("🕒 Yesterday")

            # More options
            st.markdown("⋮")

        st.markdown('</div>', unsafe_allow_html=True)

        # Card 3 - Downtown Lounge (Planned)
        st.markdown('<div style="border: 1px solid #E0E0E0; border-radius: 5px; padding: 20px; margin-bottom: 20px; position: relative;">', unsafe_allow_html=True)

        # Planned badge
        st.markdown('<div style="position: absolute; top: 20px; right: 20px; background-color: #1A1A1A; color: white; padding: 5px 10px; border-radius: 15px; font-size: 12px;">Planned</div>', unsafe_allow_html=True)

        # Main content columns
        card_content_cols = st.columns([3, 1])

        with card_content_cols[0]:
            # Left column content
            st.subheader("Downtown Lounge")
            st.caption("Reason: Based on Menu & outlet segment opportunity to sell Tanqueray")

            st.markdown("**Suggested Action:**")
            st.markdown("Add Tanqueray to featured menu items")

        with card_content_cols[1]:
            # Right column content - assignment info
            st.markdown("**Assigned to:**")
            st.markdown("👤 John Doe")

            st.markdown("**ETA:**")
            st.markdown("🕒 Tomorrow")

            # Complete checkbox
            st.checkbox("Complete", key="action3_complete")

            # More options
            st.markdown("⋮")

        st.markdown('</div>', unsafe_allow_html=True)

    # Team Assignments section
    team_header_row = st.columns([3, 1])
    with team_header_row[0]:
        st.header("Team Assignments")
        st.caption("Manage activities across your team")
    with team_header_row[1]:
        st.button("Manage Team", key="manage_team", type="secondary")

    # Team members
    team_cols = st.columns(2)

    with team_cols[0]:
        # John Doe assignments - styled to match screenshot
        st.markdown('<div style="border: 1px solid #E0E0E0; border-radius: 5px; padding: 20px; margin-bottom: 15px;">', unsafe_allow_html=True)

        # Two columns for the teammate info
        teammate_info = st.columns([1, 2])
        with teammate_info[0]:
            st.markdown("👤 **John Doe**")
            st.caption("Senior Representative")
        with teammate_info[1]:
            st.markdown("**3 Tasks**")
            st.progress(100, "3/3 completed")

        st.markdown("**Due: Today**")

        st.markdown('</div>', unsafe_allow_html=True)

    with team_cols[1]:
        # Jane Smith assignments - styled to match screenshot
        st.markdown('<div style="border: 1px solid #E0E0E0; border-radius: 5px; padding: 20px; margin-bottom: 15px;">', unsafe_allow_html=True)

        # Two columns for the teammate info
        teammate_info = st.columns([1, 2])
        with teammate_info[0]:
            st.markdown("👤 **Jane Smith**")
            st.caption("Representative")
        with teammate_info[1]:
            st.markdown("**2 Tasks**")
            st.progress(50, "1/2 completed")

        st.markdown("**Due: Tomorrow**")

        st.markdown('</div>', unsafe_allow_html=True)
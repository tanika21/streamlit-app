# -*- coding: utf-8 -*-
"""OutletIQ_component.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bOWjHTjwa4a5MxndOJuTBohRn52DSLRJ
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from utils import calculate_radar_values

def render_header():
    """Render the application header with logo and user info."""
    col1, col2, col3 = st.columns([1, 2, 1])

    with col1:
        st.image("assets/diageo_logo.svg", width=150)

    with col2:
        st.title("Outlets IQ")
        st.caption("Global on-premise sales strategy builder powered by sigmoid")

    with col3:
        st.markdown('<div style="text-align: right;">John Doe<br>Sales Representative</div>', unsafe_allow_html=True)

    # Navigation tabs
    st.markdown('<div style="height: 20px;"></div>', unsafe_allow_html=True)


def render_filters():
    """Render the filter section of the dashboard."""
    st.subheader("Filters")

    # Get current tab to create unique keys for each filter in each tab
    current_tab = st.session_state.current_tab
    tab_prefix = current_tab.lower().replace(" ", "_")

    col1, col2, col3, col4, col5 = st.columns(5)

    with col1:
        country = st.selectbox(
            "Country",
            options=["UK", "Ireland", "France", "Germany", "Spain"],
            index=0,
            key=f"{tab_prefix}_country_filter"
        )
        st.session_state.filter_country = country

    with col2:
        city = st.selectbox(
            "City",
            options=["London", "Manchester", "Birmingham", "Edinburgh", "Glasgow"],
            index=0,
            key=f"{tab_prefix}_city_filter"
        )
        st.session_state.filter_city = city

    with col3:
        territory = st.selectbox(
            "Territory",
            options=["Soho", "Mayfair", "Camden", "Brixton", "Covent Garden"],
            index=0,
            key=f"{tab_prefix}_territory_filter"
        )
        st.session_state.filter_territory = territory

    with col4:
        coverage = st.selectbox(
            "Diageo Coverage",
            options=["Yes", "No", "All"],
            index=0,
            key=f"{tab_prefix}_coverage_filter"
        )
        st.session_state.filter_coverage = coverage

    with col5:
        potential = st.selectbox(
            "Outlet Potential",
            options=["High", "Medium", "Low", "All"],
            index=0,
            key=f"{tab_prefix}_potential_filter"
        )
        st.session_state.filter_potential = potential

    return [col1, col2, col3, col4, col5]


def render_outlet_detail(outlet, products):
    """Render detailed information about the selected outlet."""
    st.markdown("---")

    # Outlet name and type
    st.header(outlet["name"])
    st.caption(outlet["type"])

    # Create a placeholder for the pub image
    st.image("assets/pub_placeholder.png", use_container_width=True)

    # Metrics section
    metrics_cols = st.columns(5)

    with metrics_cols[0]:
        st.markdown("**Footfall**")
        st.markdown(outlet["footfall"])

    with metrics_cols[1]:
        st.markdown("**Avg. Spend**")
        st.markdown(outlet["avg_spend"])

    with metrics_cols[2]:
        st.markdown("**Value Tier**")
        st.markdown(outlet["value_tier"])

    with metrics_cols[3]:
        st.markdown("**Outlet Type**")
        st.markdown(outlet["outlet_type"])

    with metrics_cols[4]:
        st.markdown("**Location Type**")
        st.markdown(outlet["location_type"])

    # Second row of metrics
    metrics_row2 = st.columns(5)

    with metrics_row2[0]:
        st.markdown("**Rating**")
        stars = "⭐" * int(outlet["review_rating"] / 20)
        st.markdown(stars)

    with metrics_row2[1]:
        st.markdown("**Audience**")
        st.markdown(outlet["audience"])

    with metrics_row2[2]:
        st.markdown("**Crowd**")
        st.markdown(outlet["crowd_type"])

    with metrics_row2[3]:
        st.markdown("**Private Label Products**")
        st.markdown(outlet["private_label"])

    with metrics_row2[4]:
        if st.button("Action Plan", type="primary", key="action_plan_button"):
            st.session_state.current_tab = "Action Planner"
            st.rerun()

    # Performance metrics and radar chart
    st.markdown("---")
    render_metrics_section(outlet)

    # Products section
    st.markdown("---")
    render_products_section(products)


def render_metrics_section(outlet):
    """Render the metrics section with radar chart and KPIs."""
    col1, col2 = st.columns([3, 2])

    with col1:
        render_radar_chart(outlet)

    with col2:
        st.subheader("Outlet Attributes")

        # KPI metrics in two columns
        kpi_col1, kpi_col2 = st.columns(2)

        with kpi_col1:
            st.markdown("**Diageo coverage**")
            st.markdown(outlet["diageo_coverage"])

            st.markdown("**Potential Score**")
            st.markdown(f"{outlet['potential_score']}")

            st.markdown("**Last quarter Business(GBP)**")
            st.markdown(outlet["last_quarter_business"])

        with kpi_col2:
            st.markdown("**Planned for coverage**")
            st.markdown(outlet["planned_coverage"])

            st.markdown("**Diageo performance score**")
            st.markdown(f"{outlet['performance_score']}")

            st.markdown("**Average Order Value(GBP)**")
            st.markdown(outlet["avg_order_value"])

            st.markdown("**Share of Menu**")
            st.markdown(outlet["share_of_menu"])


def render_radar_chart(outlet):
    """Render a radar chart showing the outlet's metrics."""
    st.subheader("Review & Ratings")

    # Extract radar chart values
    categories = [
        "Review & Ratings",
        "Demographics",
        "Opportunity",
        "Value Profile",
        "Menu & category focus"
    ]

    values = [
        outlet["review_rating"],
        outlet["demographics_score"],
        outlet["opportunity_score"],
        outlet["value_profile"],
        outlet["menu_category_focus"]
    ]

    # Ensure the values form a closed polygon
    categories = categories + [categories[0]]
    values = values + [values[0]]

    # Create radar chart
    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        fillcolor='rgba(151, 223, 188, 0.5)',
        line=dict(color='rgba(151, 223, 188, 1)', width=2),
        name='Metrics'
    ))

    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )
        ),
        showlegend=False,
        height=350,
        margin=dict(l=40, r=40, t=40, b=40)
    )

    st.plotly_chart(fig, use_container_width=True)


def render_products_section(products):
    """Render the products section showing current Diageo products."""
    st.subheader("Current Diageo Products")
    st.caption("Products currently stocked at this outlet")

    # Display products in a grid (3 columns)
    product_cols = st.columns(3)

    for i, product in enumerate(products):
        col_idx = i % 3

        with product_cols[col_idx]:
            st.markdown(f"### {product['name']} {product['volume']}")

            # Display status badge
            status = product['status']
            if status == "Well Stocked":
                st.success("✓ Well Stocked")
            elif status == "Low Stock":
                st.warning("⚠ Low Stock")
            elif status == "Out of stock":
                st.error("❌ Out of stock")
            elif status == "Missing":
                st.error("⛔ Missing")

            st.markdown(f"Last order: {product['last_order_date']}")
            st.markdown(f"Frequency: {product['frequency']}")
            st.markdown(f"Previous Ordered Volume: {product['previous_volume']}")
            st.markdown("---")


def render_missing_opportunities():
    """Render the missing opportunities section."""
    st.subheader("Missing Opportunities")
    st.caption("Products not currently stocked")

    opportunity_cols = st.columns(3)

    with opportunity_cols[0]:
        st.markdown("### Johnnie Walker Blue Label 700ml")
        st.error("⛔ Missing")
        st.markdown("68% of similar outlets stock this product")
        if st.button("Add to Action Plan", key="add_jw_blue"):
            st.success("Added to action plan!")

    with opportunity_cols[1]:
        st.markdown("### Don Julio Reposado 700ml")
        st.error("⛔ Missing")
        st.markdown("52% of similar outlets stock this product")
        if st.button("Add to Action Plan", key="add_don_julio"):
            st.success("Added to action plan!")

    with opportunity_cols[2]:
        st.markdown("### Tanqueray No. Ten 700ml")
        st.error("⛔ Missing")
        st.markdown("45% of similar outlets stock this product")
        if st.button("Add to Action Plan", key="add_tanqueray"):
            st.success("Added to action plan!")